2.2/5.2
k = 2.2/5.2
1.8 + k * 1.2
2.2 - k * 2.2
6.3 - 1.8 + k * 1.2
r = 1.269231 + 1
r
e * 5.269231
r * 5.269231
r * 1/5.269231
2.307692 + (r * 1/5.269231) * 5.007692
k = r * 1/5.269231
r - k * r
2.307692 + (r * 1/5.269231) * (6.3-2.307692)
data = read_csv("../data/poisson_dglm.csv")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
theme_set(theme_minimal())
data = read_csv("../data/poisson_dglm.csv")
data %<>%
gather(key, value, -time) %>%
filter(time > 900)
ggplot() +
geom_line(data = subset(data, key == "state"), aes(x = time, y = value)) +
geom_step(data = subset(data, key == "observation"), aes(x = time, y = value)) +
facet_wrap(~key, scales = "free_y", ncol = 1) +
theme(legend.position = "none")
rmarkdown::render_site()
rmarkdown::render_site()
library(tidyverse)
library(coda)
library(ggmcmc)
knitr::opts_chunk$set(cache=TRUE, message=FALSE, warning=FALSE, echo=FALSE)
theme_set(theme_minimal())
sims = read_csv("../data/seasonal_dlm.csv")
sims %>%
ggplot(aes(x = time, y = observation)) +
geom_line() +
labs(title = "Simulated observations from a seasonal DLM",
subtitle = "With V = 1.0, W = diag(0.01, 0.2, 0.4, 0.5, 0.2, 0.1, 0.4)")
sims %>%
select(time, contains("state")) %>%
filter(time > 750) %>%
gather(key, value, -time) %>%
ggplot(aes(x = time, y = value)) +
geom_line() +
facet_wrap(~key, scales = "free_y", strip.position = "right", ncol = 1) +
labs(title = "Simulated States of the Seasonal DLM",
subtitle = "Each dimension of the 7D state plotted against time")
filtered = read_csv("../data/seasonal_filtered.csv")
filtered %>%
inner_join(sims, by = "time") %>%
filter(time > 900) %>%
mutate(upper = qnorm(p = 0.95, mean = state_mean_2, sd = sqrt(state_variance_2))) %>%
mutate(lower = qnorm(p = 0.05, mean = state_mean_2, sd = sqrt(state_variance_2))) %>%
gather(key, value, state_mean_2, state2) %>%
ggplot(aes(x = time, y = value, colour = key)) +
geom_line() +
geom_line(aes(x = time, y = lower), linetype = 3, colour = "#000000") +
geom_line(aes(x = time, y = upper), linetype = 3, colour = "#000000") +
theme(legend.position = "bottom") +
labs(title = "Kalman Filtering the Seasonal Model",
subtitle = "Mean of the Filtering Distribution overlayed with the actual simulated state with 90% probability intervals")
smoothed = read_csv("../data/seasonal_smoothed.csv")
smoothed %>%
filter(time < 500) %>%
inner_join(sims, by = "time") %>%
mutate(upper_smoothed = qnorm(p = 0.975, mean = state_mean_1, sd = sqrt(state_variance_1))) %>%
mutate(lower_smoothed = qnorm(p = 0.025, mean = state_mean_1, sd = sqrt(state_variance_1))) %>%
gather(key, value, state1, state_mean_1) %>%
ggplot(aes(x = time, y = value, colour = key)) +
geom_line() +
geom_line(aes(x = time, y = lower_smoothed), linetype = 2, colour = "#000000") +
geom_line(aes(x = time, y = upper_smoothed), linetype = 2, colour = "#000000") +
theme(legend.position = "bottom") +
labs(title = "Smoothed State Estimate",
subtitle = "Actual state and smoothed state, with associated 95% intervals")
sims
smoothed
actual_values = tibble(
Parameter = c("V", paste0("W", 1:7)),
actual_value = c(1.0, 0.01, 0.2, 0.4, 0.5, 0.2, 0.1, 0.4)
)
iters = read_csv("../data/seasonal_dlm_gibbs.csv")
params = mcmc(iters) %>%
ggs() %>%
inner_join(actual_values, by = "Parameter")
p1 = params %>%
filter(Parameter == "V") %>%
ggplot(aes(x = Iteration, y = value)) +
geom_line() +
geom_hline(aes(yintercept = actual_value), colour = "#ff0000")
p2 = params %>%
filter(Parameter == "V") %>%
mutate(running_mean = dlm::ergMean(value)) %>%
ggplot(aes(x = Iteration, y = running_mean)) +
geom_line() +
geom_hline(aes(yintercept = actual_value), colour = "#ff0000")
# p3 = ggs_autocorrelation(params %>% filter(Parameter == "V"))
gridExtra::grid.arrange(p1, p2, ncol = 1)
p1 = params %>%
filter(Parameter %in% paste0("W", 1:7)) %>%
ggplot(aes(x = Iteration, y = value)) +
geom_line() +
# geom_hline(aes(yintercept = actual_value), colour = "#ff0000") +
facet_wrap(~Parameter, strip.position = "right")
p2 = params %>%
group_by(Parameter) %>%
filter(Parameter %in% paste0("W", 1:7)) %>%
mutate(running_mean = dlm::ergMean(value)) %>%
ggplot(aes(x = Iteration, y = running_mean)) +
geom_line() +
# geom_hline(aes(yintercept = actual_value), colour = "#ff0000") +
facet_wrap(~Parameter, scales = "free_y", strip.position = "right")
gridExtra::grid.arrange(p1, p2, ncol = 1)
forecast = read_csv("../data/seasonal_model_forecast.csv")
forecast %>%
rename(time = Time, forecast = Observation) %>%
mutate(upper = qnorm(p = 0.95, mean = forecast, sd = sqrt(Variance)),
lower = qnorm(p = 0.05, mean = forecast, sd = sqrt(Variance))) %>%
bind_rows(sims) %>%
filter(time > 900) %>%
gather(key, value, forecast, observation) %>%
ggplot() +
geom_line(aes(x = time, y = value, colour = key)) +
geom_line(aes(x = time, y = lower), linetype = 2) +
geom_line(aes(x = time, y = upper), linetype = 2) +
labs(title = "Forecast for 100 Time Points") +
theme(legend.position = "bottom")
library(tidyverse)
library(coda)
library(ggmcmc)
theme_set(theme_minimal())
gibbs_iters = read_csv("../data/first_order_dlm_gibbs.csv")
chain = mcmc(gibbs_iters) %>%
ggs() %>%
filter(Parameter %in% c("V", "W"))
p1 = ggs_traceplot(chain)
p2 = ggs_running(chain) + theme(legend.position = "none")
p3 = ggs_autocorrelation(chain)
gridExtra::grid.arrange(p1, p2, p3, ncol = 3)
gibbs_iters = read_csv("../data/first_order_dlm_gibbs.csv")
chain = mcmc(gibbs_iters) %>%
ggs() %>%
filter(Parameter %in% c("V", "W"))
p1 = ggs_traceplot(chain) + facet_wrap(~Parameter, ncol = 2)
p2 = ggs_running(chain) + theme(legend.position = "none") + facet_wrap(~Parameter, ncol = 2)
p3 = ggs_autocorrelation(chain)
gridExtra::grid.arrange(p1, p2, p3, ncol = 1)
gibbs_iters = read_csv("../data/first_order_dlm_gibbs.csv")
chain = mcmc(gibbs_iters) %>%
ggs() %>%
filter(Parameter %in% c("V", "W"))
p1 = ggs_traceplot(chain) + facet_wrap(~Parameter, ncol = 2, scales = "free_y")
p2 = ggs_running(chain) + theme(legend.position = "none") + facet_wrap(~Parameter, ncol = 2, scales = "free_y")
p3 = ggs_autocorrelation(chain)
gridExtra::grid.arrange(p1, p2, p3, ncol = 1)
gibbs_iters = read_csv("../data/first_order_dlm_gibbs.csv")
chain = mcmc(gibbs_iters[-c(1:1000),]) %>%
ggs() %>%
filter(Parameter %in% c("V", "W"))
p1 = ggs_traceplot(chain) + facet_wrap(~Parameter, ncol = 2, scales = "free_y")
p2 = ggs_running(chain) + theme(legend.position = "none") + facet_wrap(~Parameter, ncol = 2, scales = "free_y")
p3 = ggs_autocorrelation(chain)
gridExtra::grid.arrange(p1, p2, p3, ncol = 1)
rmarkdown::render_site()
3.291971 * (1/6.291971)
10.1 - 4.027007
e = 10.1 - 4.027007
k = 3.291971 * (1/6.291971)
4.027007 + k*e
r = 3.291971
r - k * r
m4 = 4.027007
c4 = 2.291971
r5 = 3.291971
s5 = 7.204408
S5 = 1.569606
m4 + c4 * (1/r5)*(s5-a5)
a5 = 4.027007
m4 + c4 * (1/r5)*(s5-a5)
c4**2*(1/r5**2)*(r5-S5)
s4 = m4 + c4 * (1/r5)*(s5-a5)
s4
S4 = c4**2*(1/r5**2)*(r5-S5)
s4
S4 = c4**2*(1/r5**2)*(r5-S5)
S4
15.2-7.204408
k7 = 3.569606 / 6.569606
a7 = 7.204408
e7 15.2-7.204408
e7 = 15.2-7.204408
a7 + k7 * e7
r7 = 3.569606
r7 - k7 * r7
